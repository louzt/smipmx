---
interface Props {
    imagePath: string;
    height?: string;
    title: string;
    subtitle?: string;
}

const { imagePath, height = "100vh", title, subtitle } = Astro.props;
---

<div class={`relative ${height} overflow-hidden bg-smip-black`}>
    <div class="absolute inset-0 z-0">
        <div class="absolute inset-0 bg-gradient-to-r from-smip-black/90 to-smip-black/70 z-10"></div>
        <div class="relative h-full w-full">
            <img 
                src={imagePath} 
                alt={title}
                class="w-full h-full object-cover object-center transform scale-110"
                style="transform-origin: center center;"
            />
        </div>
    </div>
    
    <div class="relative z-20 h-full flex items-center">
        <div class="container mx-auto px-4 py-12 md:py-20">
            <div class="max-w-4xl fade-in">
                <h2 class="text-3xl md:text-5xl font-bold text-white mb-4">
                    {title}
                </h2>
                {subtitle && (
                    <p class="text-lg md:text-xl text-white/80 mb-8">
                        {subtitle}
                    </p>
                )}
                <slot />
            </div>
        </div>
    </div>
</div>

<style>
    img {
        transition: transform 0.3s ease-out;
    }

    .parallax-container {
        transform-style: preserve-3d;
        transform: perspective(1000px);
    }

    @media (min-width: 768px) {
        img {
            transform: scale(1.1);
            animation: subtle-zoom 20s ease-in-out infinite alternate;
        }
    }

    @keyframes subtle-zoom {
        from {
            transform: scale(1.1);
        }
        to {
            transform: scale(1.2);
        }
    }
</style>

<script>
    let ticking = false;
    const parallaxImages = document.querySelectorAll('.parallax-container img');

    function updateParallax(scrollPos: number) {
        parallaxImages.forEach((img) => {
            const speed = 0.15;
            const yPos = -(scrollPos * speed);
            img.style.transform = `translateY(${yPos}px) scale(1.1)`;
        });
    }

    window.addEventListener('scroll', () => {
        const scrollPos = window.pageYOffset;
        if (!ticking) {
            window.requestAnimationFrame(() => {
                updateParallax(scrollPos);
                ticking = false;
            });
            ticking = true;
        }
    });
</script>